#!/usr/bin/env perl
use v5.16.3;

use strictures 1;
use FindBin '$Bin';
use Path::Tiny;
use File::ShareDir ':ALL';

use Mojolicious::Lite;

# VERSION

plugin 'Blog' => {storage => 'directory',};

plugin 'Config' => {file => path(dist_dir('App-skryf'), "skryf.conf")};

my $cfghash = app->config->{skryfcfg} || +{};

my $postdir = $cfghash->{post_directory} || '%bindir%/posts';
$postdir = App::skryf::Util->sformat($postdir, bindir => $Bin);

my $postlist = App::skryf::PostList->from_dir($postdir);

my $skryfcfg = App::skryf::Cfg->new(%$cfghash);
helper skryfconf => sub {$skryfcfg};

get '/' => sub {
    my $self = shift;

    $self->stash(postlist => $postlist->scan);

    my $tmpl = $cfghash->{index_template} || 'index';
    $self->render($tmpl);
};

# Category feeds
get '/feeds/:category/atom.xml' => sub {
    my $self     = shift;
    my $category = $self->param('category');
    my $_posts   = $postlist->scan;
    $self->stash(postlist => $_posts->by_cat($category));
    my $tmpl = 'atom';
    $self->render(template => $tmpl, format => 'xml');
};

# atom.xml
get '/atom.xml' => sub {
    my $self = shift;

    my $_posts = $postlist->scan;

    $self->stash(postlist => $_posts->by_date);
    my $tmpl = 'atom';
    $self->render(template => $tmpl, format => 'xml');
};

get '/about' => sub {
    my $self = shift;
    my $tmpl = $cfghash->{about_template} || 'about';
    my $post = $postlist->get('about');
    $self->stash(post => $post);
    $self->render($tmpl);

};

get '/post/:id' => sub {
    my $self = shift;

    my $id = $self->param('id');
    unless ($id =~ /^[A-Za-z0-9_-]+$/) {
        $self->render(text => 'Invalid post name!', status => 404);
        return;
    }

    my ($post, $retry);
  FETCH_POST: {
        $post = $postlist->get($id);

        unless ($post) {
            if ($retry) {
                $self->render(text => 'No such post!', status => 404);
                return;
            }
            ## FIXME try to load this specific post instead of re-scanning
            $postlist->scan;
            ++$retry;
            redo FETCH_POST;
        }
    }

    $self->stash(post => $post);

    my $tmpl = $cfghash->{post_template} || 'post';
    $self->render($tmpl);
};

###############################################################################
# START THE PARTY
###############################################################################
app->secret("WHO CARES RITE?");
app->start;

__END__

=head1 NAME

App-skryf - perl blogger

=head1 PREREQS

I like L<http://perlbrew.pl> and so should you :)

=head1 INSTALLATION

    $ git clone git://github.com/battlemidget/App-skryf.git
    $ cpanm --installdeps .

=head1 DEPLOY

    $ export BLOGUSER=username
    $ export BLOGSERVER=example.com
    $ rex deploy

=head1 RUN (Development)

    $ plackup -R

=head1 RUN (Production)

I use Ubic to manage the process

   use Ubic::Service::SimpleDaemon;
   my $service = Ubic::Service::SimpleDaemon->new(
    bin => "starman -p 9001 perl5/perlbrew/perls/perl-5.16.3/bin/skryf -R",
    cwd => "/home/username",
    stdout => "/tmp/blog.log",
    stderr => "/tmp/blog.err.log",
    ubic_log => "/tmp/blog.ubic.log",
    user => "username"
   );

=head1 AUTHOR

Adam Stokes <adamjs@cpan.org>

=head1 DISCLAIMER

Jon Portnoy [avenj at cobaltirc.org](http://www.cobaltirc.org) is original author of blagger
in which this code is based heavily off of.

=head1 LICENSE

Licensed under the same terms as Perl.

=cut
